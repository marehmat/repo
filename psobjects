# Path to your SQLite DB
$db = "C:\Data\POC\migration.db"

# Create table with common SharePoint site collection fields
sqlite3 "$db" @"
CREATE TABLE IF NOT EXISTS SiteCollections (
  SCId TEXT PRIMARY KEY,              -- GroupId/SiteId if available, else GUID
  Url TEXT UNIQUE,                    -- https://contoso.sharepoint.com/sites/...
  Template TEXT,                      -- e.g., GROUP#0, SITEPAGEPUBLISHING#0
  OwnerUpn TEXT,                      -- Primary site collection admin
  StorageMB INTEGER,                  -- Storage usage (rounded MB)
  StorageQuotaMB INTEGER,             -- Quota MB (if available)
  IsHub INTEGER,                      -- 0/1
  HubId TEXT,                         -- HubSiteId
  CreatedUtc TEXT,                    -- ISO 8601
  LastContentModifiedUtc TEXT,        -- if available
  LockState TEXT,                     -- Unlock, ReadOnly, NoAccess
  SharingCapability TEXT,             -- Disabled, ExternalUserSharingOnly, etc.
  SensitivityLabel TEXT,              -- if available via PnP
  Status TEXT,                        -- general status field
  RunId TEXT                          -- lineage
);
CREATE INDEX IF NOT EXISTS ix_SiteCollections_Url ON SiteCollections(Url);
CREATE INDEX IF NOT EXISTS ix_SiteCollections_RunId ON SiteCollections(RunId);
"@




param(
  [Parameter(Mandatory=$true)]
  [string]$AdminUrl,                          # e.g. https://contoso-admin.sharepoint.com
  [string]$DbPath = "C:\Data\POC\migration.db",
  [int]$Limit = 0,                            # 0 = all; otherwise Select-Object -First N
  [string]$Template,                          # optional filter, e.g. GROUP#0 or SITEPAGEPUBLISHING#0
  [switch]$IncludePersonalSite                # include OneDrive for Business personal sites
)

$ErrorActionPreference = "Stop"

# Ensure SPO module is available
Import-Module Microsoft.Online.SharePoint.PowerShell -ErrorAction Stop

# 1) Connect to SharePoint Online Admin
# Prompts for credentials in PS5.1
Connect-SPOService -Url $AdminUrl

# 2) Enumerate site collections (server side filters where possible)
$sitesParams = @{}
if ($Template)            { $sitesParams['Template'] = $Template }
if ($IncludePersonalSite) { $sitesParams['IncludePersonalSite'] = $true }

$allSites = Get-SPOSite @sitesParams -Limit All

# Optional local limit for POC
$sites = if ($Limit -gt 0) { $allSites | Select-Object -First $Limit } else { $allSites }

# 3) Load SQLite provider (ensure DLLs are unblocked and native interop present)
Add-Type -Path "C:\Tools\SQLite\lib\System.Data.SQLite.dll"

# 4) Open SQLite and ensure schema exists
$conn = New-Object System.Data.SQLite.SQLiteConnection ("Data Source=$DbPath;Version=3;")
$conn.Open()

# Concurrency-friendly pragmas (OK on local NTFS)
$pragma = $conn.CreateCommand()
$pragma.CommandText = "PRAGMA journal_mode=WAL; PRAGMA synchronous=NORMAL;"
[void]$pragma.ExecuteNonQuery()

# Basic table for SPO sites (adjust as needed)
$ddl = $conn.CreateCommand()
$ddl.CommandText = @"
CREATE TABLE IF NOT EXISTS SiteCollections (
  SCId TEXT PRIMARY KEY,
  Url TEXT UNIQUE,
  Template TEXT,
  OwnerUpn TEXT,
  StorageMB INTEGER,
  StorageQuotaMB INTEGER,
  IsHub INTEGER,
  HubId TEXT,
  CreatedUtc TEXT,
  LastContentModifiedUtc TEXT,
  LockState TEXT,
  SharingCapability TEXT,
  SensitivityLabel TEXT,
  Status TEXT,
  RunId TEXT
);
CREATE UNIQUE INDEX IF NOT EXISTS ux_SiteCollections_Url ON SiteCollections(Url);
"@
[void]$ddl.ExecuteNonQuery()

# 5) Upsert into SQLite in a single transaction
$tx = $conn.BeginTransaction()
try {
  $runId = [guid]::NewGuid().ToString()

  $up = $conn.CreateCommand()
  $up.Transaction = $tx
  $up.CommandText = @"
INSERT INTO SiteCollections
  (SCId, Url, Template, OwnerUpn, StorageMB, StorageQuotaMB, IsHub, HubId, CreatedUtc, LastContentModifiedUtc, LockState, SharingCapability, SensitivityLabel, Status, RunId)
VALUES
  (@SCId, @Url, @Template, @OwnerUpn, @StorageMB, @StorageQuotaMB, @IsHub, @HubId, @CreatedUtc, @LastContentModifiedUtc, @LockState, @SharingCapability, @SensitivityLabel, @Status, @RunId)
ON CONFLICT(Url) DO UPDATE SET
  Template=excluded.Template,
  OwnerUpn=excluded.OwnerUpn,
  StorageMB=excluded.StorageMB,
  StorageQuotaMB=excluded.StorageQuotaMB,
  IsHub=excluded.IsHub,
  HubId=excluded.HubId,
  CreatedUtc=excluded.CreatedUtc,
  LastContentModifiedUtc=excluded.LastContentModifiedUtc,
  LockState=excluded.LockState,
  SharingCapability=excluded.SharingCapability,
  SensitivityLabel=excluded.SensitivityLabel,
  Status=excluded.Status,
  RunId=excluded.RunId;
"@

  $count = 0
  foreach ($s in $sites) {
    # Map SPO properties; names below are from Get-SPOSite
    $scId    = if ($s.GroupId) { $s.GroupId.ToString() } elseif ($s.SiteId) { $s.SiteId.ToString() } else { [guid]::NewGuid().ToString() }
    $url     = ($s.Url).ToLower().TrimEnd('/')
    $tmpl    = $s.Template
    $owner   = $s.Owner
    $storMB  = if ($s.StorageUsageCurrent -ne $null) { [int]$s.StorageUsageCurrent } else { $null }  # MB
    $quota   = if ($s.StorageQuota -ne $null) { [int]$s.StorageQuota } else { $null }                 # MB
    $isHub   = [int]([bool]$s.IsHubSite)
    $hubId   = if ($s.HubSiteId) { $s.HubSiteId.ToString() } else { $null }
    $created = if ($s.CreationTime) { ([DateTime]$s.CreationTime).ToString("o") } else { $null }
    $last    = if ($s.LastContentModifiedDate) { ([DateTime]$s.LastContentModifiedDate).ToString("o") } else { $null }
    $lock    = $s.LockState
    $share   = $s.SharingCapability
    $label   = $s.SensitivityLabel
    $status  = $s.Status

    $up.Parameters.Clear()
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@SCId",$scId)))
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@Url",$url)))
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@Template",$tmpl)))
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@OwnerUpn",$owner)))
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@StorageMB",$storMB)))
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@StorageQuotaMB",$quota)))
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@IsHub",$isHub)))
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@HubId",$hubId)))
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@CreatedUtc",$created)))
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@LastContentModifiedUtc",$last)))
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@LockState",$lock)))
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@SharingCapability",$share)))
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@SensitivityLabel",$label)))
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@Status",$status)))
    [void]$up.Parameters.Add((New-Object System.Data.SQLite.SQLiteParameter("@RunId",$runId)))

    [void]$up.ExecuteNonQuery()
    $count++
  }

  $tx.Commit()
  Write-Host "Inserted/updated $count sites into $DbPath (RunId=$runId)."
}
catch {
  $tx.Rollback()
  throw
}
finally {
  $conn.Close()
}









PowerShell.exe -ExecutionPolicy Bypass -File "C:\Data\POC\import-sites-pnp.ps1" -AdminUrl "https://contoso-admin.sharepoint.com" -DbPath "C:\Data\POC\migration.db"

sqlite3 "C:\Data\POC\migration.db" "SELECT Url, Template, OwnerUpn, StorageMB, IsHub, LockState FROM SiteCollections ORDER BY Url LIMIT 10;"





























# Initialize an empty array
$employeeData = @()

# Sample data source (e.g., replace with Get-AzureADUser or other queries)
$employees = @(
    @{ Name = "Alice Johnson"; Department = "IT"; HireDate = "2023-01-15" },
    @{ Name = "Bob Smith"; Department = "Finance"; HireDate = "2022-06-01" },
    @{ Name = "Charlie Davis"; Department = "HR"; HireDate = "2024-03-20" }
)

# Loop through the data and create PSCustomObjects
foreach ($emp in $employees) {
    $object = [PSCustomObject]@{
        FullName   = $emp.Name
        Dept       = $emp.Department
        HireDate   = [DateTime]$emp.HireDate  # Cast to DateTime for proper formatting
        Status     = "Active"  # Example computed property
    }
    $employeeData += $object  # Add to the array (use ArrayList for large datasets)
}

# Export the array to a CSV file
$employeeData | Export-Csv -Path "C:\Reports\EmployeeData.csv" -NoTypeInformation -Encoding UTF8

# If you want to include type info or use a different delimiter (e.g., semicolon for some regions)
# $employeeData | Export-Csv -Path "C:\Reports\EmployeeData.csv" -Delimiter ';' -Encoding UTF8







$employeeData = New-Object System.Collections.ArrayList
foreach ($emp in $employees) {
    $object = [PSCustomObject]@{ /* properties */ }
    $null = $employeeData.Add($object)
}
$employeeData | Export-Csv -Path "C:\Reports\EmployeeData.csv" -NoTypeInformation



  # Generic catch for other errors
    Write-Error "Unexpected error: $($_.Exception.GetType().FullName) - $($_.Exception.Message). Stack trace: $($_.Exception.StackTrace)"
    # Log to file for auditing
    Add-Content -Path "C:\Logs\ScriptErrors.log" -Value "$(Get-Date): $($_.Exception.Message)"
